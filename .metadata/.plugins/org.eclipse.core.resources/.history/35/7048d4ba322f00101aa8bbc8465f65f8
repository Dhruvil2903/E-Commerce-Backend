package com.api_gateway.Filter;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.http.HttpStatus;
import org.springframework.web.server.ServerWebExchange;

import reactor.core.publisher.Mono;

public class JwtFilter implements GlobalFilter {

	@Autowired
	private JwtUtil jwtUtil;
	
	@Override
	public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
		
		String authHeader = exchange.getRequest().getHeaders().getFirst("Authorization");
		 // Skip token validation for login/register
		 String path = exchange.getRequest().getURI().getPath();
	    if (path.startsWith("/api/auth")) {
	        return chain.filter(exchange);
	    }

		if(authHeader == null && !authHeader.startsWith("Bearer ")) {
			exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
			return exchange.getResponse().setComplete();
		}
		
		String token = authHeader.substring(7);
		try {
			
			jwtUtil.validateToken(token);
//			System.out.println("Authenticated user gateway : "+ username);
			
		}catch(Exception e) {
			exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
			return exchange.getResponse().setComplete();
		}
		return chain.filter(exchange);
	}

}
