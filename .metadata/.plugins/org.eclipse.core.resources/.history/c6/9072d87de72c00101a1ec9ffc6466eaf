package com.order.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.order.Entity.Order;
import com.order.customException.OrderAlreadyExist;
import com.order.customException.OrderNotFoundException;
import com.order.enumModel.OrderStatus;
import com.order.repository.OrderRepository;

@Service
public class OrderService {

	@Autowired
	private OrderRepository orderRepository;

	public Order addOrder(Order order) throws OrderAlreadyExist {
		Optional<Order> orderExist = orderRepository.findByOrderName(order.getName());// object finding order by name

		if (orderExist.isPresent()) {// checking if exist then throw exception
			throw new OrderAlreadyExist("Order is already Exist");
		}
		// if not then print message
		System.out.println("Order Saved Successfully");
		// set orderStatus
		order.setOrderStatus(OrderStatus.pending);
		return orderRepository.save(order);// save order

	}

	public Order getOrder(String name) throws OrderNotFoundException {

		return orderRepository.findByOrderName(name).orElseThrow(() -> new OrderNotFoundException("Order is not found"));
	}

	public Order updateOrder(String name, Order orderDetails) throws OrderNotFoundException {
		Optional<Order> orderFound = orderRepository.findByOrderName(name);

		if (orderFound.isEmpty()) {
			throw new OrderNotFoundException("Order is not found");
		}

		Order order = orderFound.get();

		order.setName(orderDetails.getName());
		order.setPrice(orderDetails.getPrice());
		order.setDate(orderDetails.getDate());

		return orderRepository.save(order);
	}

	public Order deleteOrder(String name) throws OrderNotFoundException {
		Optional<Order> findOrder = orderRepository.findByOrderName(name);

		if (findOrder.isEmpty()) {
			throw new OrderNotFoundException("Order is not found");

		}
		Order deleteOrder = findOrder.get();
		orderRepository.delete(deleteOrder);

		return deleteOrder;
	}
}
